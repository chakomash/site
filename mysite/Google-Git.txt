vcs-git


Version Control System, or VCS.
 
A Version Control System keeps track of the changes that we make to our files. By using a VCS, we can know when the changes were made and who made them. 
It also lets us easily revert a change if it turned out not to be a good idea. 
It makes collaboration easier by allowing us to merge changes from lots of different sources.
But, no matter how the VCS is implemented internally, they always access the history of our files. 
Let us retrieve past versions of the file or directory and see who changed which files, how each file was changed and when the file was changed. 
On top of this, we can make edits to multiple files and treat that collection of edits as a single change which is commonly known as a, commit. 
A VCS even provides a mechanism to allow the author of a commit to record why the change was made, including what bugs,tickets or issues were fixed by the change

what is Git?

Git is a VCS created in 2005 by Linus Torvalds. 
The developer who started the Linux kernel. 
Git is a free open source system available for installation on Unix based platforms, Windows and macOS 

Let's start by setting some basic configuration. 
Remember when we said that a VCS tracks who made which changes, for this to work, we need to tell Git who we are. 
We can do this by using the {Git config command} and then setting the (values of user.email and user.name) to our email and our name like this

>>git config --global user.email "gmail"
>>git config --global user.name "name"

We use the [dash dash{--} global]flag to state that we want to set this value for all git repositories that we'd use. 
We could also set different values for different repositories. With that done, 
there are two ways to start working with a git repository. 
We can create one from scratch using the git init command or we can use the git clone command to make a copy of a repository that already exists somewhere else

creating a new directory and then a git repository inside that directory.

>>mkdir checks //making a new directory
>>cd checks    //entering into that directory usig cd command
>>git init

So when we run {git init} we initialize an empty git repository in the current directory.
The message that we get mentions a directory called .git 
We can checkg that this directory exist using the {ls -la} command which lists files that start with a dot. 
We can also use the {ls -l.git} command to look inside of it and see the many different things it contains. This is called a Git directory.

>>git add {file}

To make git track our file ,we'll add it to the project using the {git add} command passing the file that we want as a parameter. with that, we've added our file to the staging area
The staging area  which is also known as the index is a file maintained by git that contains  all of the information about what files and changes are going to go into your next command

>>git status

we can use the git status command to get some information about the current working tree and pending changes

>>git commit -m "message"

once we modify our file,this means that our file is currently part of the staging area,and it will be commited once we run next git command,{git commit}
in this case ,instead of opening up an editor, let's pass the commit message using the dash m flag,stating that we added periods  at the end of the sentences
so, we've now commited our stage changes this creates a new snapshots in the git directory

>>git config -l

ler's check out our current configuration by using the {git config -l} command there's a bunch of info in there,pay special attention to the user.email and user.name
this information will appear in public commit logs if you use a shared repository

>>git commit -a -m "message"

git commit -a doesn't work on new files because those are untracked.instead,git commit -a ia shortcut to stage any changes to tracked files and commit them in one step
if the modified file has never been committed to the repo,we'll need to use git add to track it first

>>git log -p

using this option, we can quickly see what changes were made to the files in our repository
this can be useful if we're trying to track down a change that recently broke out tools

>> git show

>>git log --stat

another intersting flag for git log is the --stat flag this will cause git log to show some stats about the changes in the commit,like which files were changed and how many lines were added or removed

>>git diff

it shows new changes added to the file

>> git add -p

when we use this flag,git will show us the the change being added and ask us if we want to stage it or not .this way we can detect if there's any changes that we doon't want to commit

>>git diff --staged

to see the changes that are staged but not committed.with this command ,we can see actual stage changes before we call git commit

//Deleting and Renaming files

>>git rm {file name}

so we see that by calling git rm, the file was deleted from the directory,and the change was also staged to be committed in our next commit

>>git commit -m "message after deletion"

as usual we get a bunch of stats when we do the commit. check out all the deletions that reported and it states the file itself was deleted

>>git mv {(file name) wanted to change} {new file name}

The git status shows us that the file was renamed  and clearly displays the old and new names

>>echo .DS_STORE> {file name}

this file remains hidden in the list using ls command,instead if we use ls -la command it shows 
also it is in untracked list

>>git checkout {file name}

we've demonstrated how we can use {git checkout} to revert changes to modify files before they get staged. 
This command will restore the file to the latest storage snapshot, which can be either committed or staged. 
So if you've made additional changes to a file after you've staged it, you can restore the file to the earlier stage version

>>git add * 

add changes to the staging area
to add all files in the untracked list

>>git restore --staged {file name}
>>git reset HEAD {file name}

To unstage the file(new) back to the untracked list

>>git commit --amend

We've amended our previous commit to include both files and a better message. 
You could also just update the message of the previous commit by running the {git commit --amend} command with no changes in the staging area.
An important heads up. While {git --amend} is okay for fixing up local commits, you shouldn't use it on public commits

//rollback 

>>git revert HEAD

Okay. It's rollback time. Let's get rid of this faulty code by typing git revert head. So once we issue that git revert command, we're presented with the text editor commit interface that we've all seen before. In this case, we can see that git has automatically added some text to the command indicating it's a rollback. The first-line mentions that it's reverting the commit we just did called Add call to disk full function The extra description even includes the identifier of the commit that got reverted. While we could use this description as is, it's usually a good idea to add an explanation of why we're doing the rollback. Remember that the goal of these descriptions is to help our future selves understand why things happen. In this case, we'll explain that the reason for the rollback is that the code was calling a function that wasn't defined.
Once we're done entering the description, we can exit and save as usual. You'll notice the output that we get from the git revert command looks like the output of the git commit command. This is because git revert creates a commit for us. Since a revert is a normal commit, we can see both the commit and the reverted commit in the log. Let's look at the last two entries in the log using dash P and dash two as parameters. As demonstrated before, the dash P parameter lets us see the patch created the dash P parameter lets us see the patch created by the commit while the dash two perimeter limits the output to the last two entries. So in this log, we can see that when we called revert, git created a new commit that's the inverse of the previous one. This removes the lines that we added in the previous commit. We can see that the original commit shows the lines we added by preceding them with a plus sign. The same line shows up with a minus sign in the newer commit message indicating that they were removed

 //identifying a commit

>>git show {hash(commiited file) code from log)
Okay, now that we've seen how we can identify the commit that we want to revert, let's call the git revert command with this identifier. 

>>git revert {hash(first 5 term)}    -->hash=ID

As usual, this will open an editor where we should add a reason for the rollback. In this case, we'll say that the previous name was actually better.
As we called out before, when we generate the rollback, Git automatically includes the ID of the commit that we're reverting. This is useful when looking at a repo with a complicated history that includes a lot of commits. Now, once we save and exit the commit message, Git will actually perform the rollback and generate a new commit with its own ID. See how before the name of our commit the revert command already shows the first eight characters of the commit ID


//Branch

* what is a branch ?
In Git, a branch at the most basic level is just a pointer to a particular commit. But more importantly, 
it represents an independent line of development in a project. Of which the commit it points to is the latest link in a chain of developing history. 
The default branch that Git creates for you when a new repository initialized is called master.
When you want to add a feature or fix something, you can create a new branch and do your development there. 
You can merge back into the master branch, when you've got something you like, or discard your changes without negative impact if they don't work out.

//creating new branch

>>git branch

git branch represents the current branch

>>git branch {name for new barnch}

creating a new branch

>>git checkout {new branch name}

it switch's to the new branch

>>git checkout-b {name for new barnch}

single command for a new branch creation and switching it

when we switch branches in git, the working directory and commit history will be changed to reflect the snapshot of our project in that branch.
When we check out a new branch and commit on it, those changes will be added to the history of that branch.
Since the {new file} was committed on another branch, it doesn't show up in the history or working directory of the master branch.
One thing to note after all this back and forth, is that each branch is just a pointer to a specific commit in a series of snapshots. 
It's very easy to create new branches because there isn't any data that needs to be copied around. 
When we switch to another branch, we check out a different commit and git updates both head and the contents of our working directory.

//deleting a branch

>>git branch -d {name of  to be the deleted branch}

//merging 

>>git merge {name of branch wanted to be merged}

Merging is the term that Git uses for combining branch data and history together. We'll use the {git merge} command

//merge conflict

Normally, Git can automatically merge files for us. But when we have a merge conflict, it will need a little help to figure out what to do.


//Github

by creating new repository in the github you can clone into your local machine by

>>git clone {clone link from github}

>>git push

Okay. We've modified our {README file} But we've seen all this before. We got to remote repository set up on GitHub. 
So let's use it. We can send our changes to that remote repository by using the git push command which will gather all the snapshots we've taken and send them to the remote repository.
In this case, we've only taken one snapshot.
When we access our project, we see the contents of the README file. So if we check our repository on GitHub, we should see the updated message.

>>git config --global credential.helper cache

You've probably noticed that we had to enter our password both when retrieving the repo and when pushing changes to the repo. There are a couple ways to avoid having to do this. One way is to create an SSH key pair and store the public key in our profile so that GitHub recognizes our computer. Another option is to use a credential helper which caches our credentials for a time window so that we don't need to enter our password with every interaction. Git already comes with a credential helper baked in. we just need to enable it,we do that by calling git config --global credential.helper cache

>>git pull

git pull which is the command we use to retrieve new changes from the repository.

//working with remotes

>>git remote -v

When we call a git clone to get a local copy of a remote repository, Git sets up that remote repository with the default origin name. We can look at the configuration for that remote by running git remote -v in the directory of the repo.
Here we see the URLs associated with the origin remote. There are two URLs. One will be used to fetch data from the remote repository, and the other one to push data to that remote repo.
But in some cases, you can have the fetch URL use HTTP for read only access, and the push URL use HTTPS or SSH for access control. This is fine as long as the contents of the repo that you read when fetching are the same that you write to in pushing. Remote repositories have a name assigned to them, by default, the assigned name is origin. 
They'll usually point at the same place. But in some cases, you can have the fetch URL use HTTP for read only access, and the push URL use HTTPS or SSH for access control. This is fine as long as the contents of the repo that you read when fetching are the same that you write to in pushing. Remote repositories have a name assigned to them, by default, the assigned name is origin. This lets us track more than one remote in the same Git directory.

>>git remote show orign

If we want to get even more information about our remote, we can call git remote show origin
There's a ton of information here, and we don't need all of it right now. We can see the fetch and push URLs that we saw before, and the local and remote branches too.

>>git branch -r

Whenever we're operating with remotes, Git uses remote branches to keep copies of the data that's stored in the remote repository. We could have a look at the remote branches that our Git repo is currently tracking by running {git branch -r}

>>git fetch

Git doesn't keep remote and local branches in sync automatically, it waits until we execute commands to move data around when we're ready. To sync the data, we use the {git fetch} command. This command copies the commits done in the remote repository to the remote branches, so we can see what other people have committed.
Git doesn't keep remote and local branches in sync automatically, it waits until we execute commands to move data around when we're ready. To sync the data, we use the git fetch command. 

>>git checkout

Fetched content is downloaded to the remote branches on our repository. So it's not automatically mirrored to our local branches. We can run {git checkou} on these branches to see the working tree, and we can run git log to see the commit history.

>>git log origin/master

Let's look at the current commits in the remote repo by running git log origin/master.
we can see that the remote origin/branch is pointing to the latest commit. While the local master branch is pointing to the previous commit we made earlier on

>>git merge origin/master

we can perform a merge operation, which merges the origin/master branch into our local master branch. To do that, we'll call git merge origin/master.

>>git push --set-upstream orign {new branch name}
>>git push -u origin {branch name}

by this two command we can add our new branch created in local machine to the github

>>git push --delete origin {branch name}

by this command we can deltet that branch from github


{
Merge conflicts are not uncommon when working in a team of developers, or on Open Source Software. Fortunately, GitHub has some good documentation on how to handle them when they happen:

https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-merge-conflicts
https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/resolving-a-merge-conflict-using-the-command-line
https://git-scm.com/book/en/v2/Git-Branching-Rebasing
https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History
}

//forking

Forking is a way of creating a copy of the given repository so that it belongs to our user. In other words, our user will be able to push changes to the forked copy, even when we can't push changes to the other repo. When collaborating on projects hosted on GitHub, the typical workflows, first, create a fork of the repo, and then work on that local fork. A forked repo is just like a normal repo, except Github knows which repo it forked from. So we can eventually merge our changes back into the main repo by creating a pull request

//pull request

A pull request is a commit or series of commits that you send to the owner of the repository so that they incorporate it into their tree. This is a typical way of working on GitHub, because in most projects, only a few people have commit rights to the repo. But anybody can suggest patches, bug fixes or even new features by sending pull requests that people with commit access can then apply.

//Git Fork and Pull Request Cheat Sheet

https://help.github.com/en/articles/about-pull-request-merges

//code reviews in github

More Information on Code Reviews:
http://google.github.io/styleguide/
https://help.github.com/en/articles/about-pull-request-reviews
https://medium.com/osedea/the-perfect-code-review-process-845e6ba5c31
https://smartbear.com/learn/code-review/what-is-code-review/


